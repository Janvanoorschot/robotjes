#!/usr/bin/env python3

import sys, os
import argparse
import asyncio

import config
import cli

rootdir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
sys.path.append(rootdir)

# get commandline arguments
parser = argparse.ArgumentParser(description='CommandLineInterface (CLI) for Umpire')
parser.add_argument('--url', type=str, default=config.REST_URL, help='url of the robotjes REST entrypoint')
parser.add_argument('--umpire', type=str, default="me", help='name or id of the umpire')
parser.add_argument('--name', type=str, default="the_game", help='name of the game to create')
parser.add_argument('--password', type=str, default="secret", help='password needed to enter the game')
parser.add_argument('--maze', type=str, default="default", help='password needed to enter the game')
args = parser.parse_args()


class Timer:
    def __init__(self, timeout, callback, repeat=False):
        self.timeout = timeout
        self.callback = callback
        self.repeat = repeat
        self.task = asyncio.ensure_future(self.job())

    async def job(self):
        await asyncio.sleep(self.timeout)
        await self.callback()
        if self.repeat:
            self.task = asyncio.ensure_future(self.job())

    def cancel(self):
        self.task.cancel()


async def main(loop):
    umpire = cli.CLIUmpire(loop, args.url)
    timer = Timer(1,umpire.timer, True)
    success = await umpire.run_game(args.umpire, args.name, args.password, args.maze)
    # timer.cancel()
    print(f"created game {args.name} -> {success}")

# run our main loop
aloop = asyncio.get_event_loop()
aloop.run_until_complete(main(aloop))