#!/usr/bin/env python3

import sys, os
import argparse
rootdir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
sys.path.append(rootdir)
import config

# get commandline arguments
parser = argparse.ArgumentParser(description='Start the Bubbles/Robo REST Server.')
parser.add_argument('--host', type=str, default='0.0.0.0', help='host')
parser.add_argument('--port', type=int, default=8000, help='port')
parser.add_argument('--logconf', type=str, default=config.LOG_CONFIG_FILE, help='port')
parser.add_argument('--pikaurl', type=str, default=config.PIKA_URL, help='rabbitmq url')
parser.add_argument('--bubblehubsexchange', type=str, default=config.BUBBLEHUBS_EXCHANGE, help='rabbitmq queue to use for rpc calls')
parser.add_argument('--bubblehubsqueue', type=str, default=config.BUBBLEHUBS_QUEUE, help='rabbitmq queue to use for rpc calls')
parser.add_argument('--monitorexchange', type=str, default=config.MONITOR_EXCHANGE, help='monitor exchange')
parser.add_argument('--gamesexchange', type=str, default=config.GAMES_EXCHANGE, help='games exchange')
args = parser.parse_args()

# initialise
import roborest
roborest.pikaurl = args.pikaurl

# initialise the monitor module
import monitor
monitor.mon = monitor.async_monitor_client.AsyncMonitorClient(args.monitorexchange)

from roborest.status_keeper import  StatusKeeper
roborest.status_keeper = StatusKeeper()
def listener(routing_key, request):
    roborest.status_keeper.game_status_event(request)

# initialise the roborest module
import fastapi
from roborest.async_rpc_client import AsyncRPCClient
roborest.async_rpc_client = AsyncRPCClient(args.bubblehubsexchange, args.bubblehubsqueue)
from roborest.async_topic_listener import AsyncTopicListener
roborest.async_topic_listener = AsyncTopicListener(args.gamesexchange, "*.status", listener)
roborest.app = fastapi.FastAPI()

# import the files with REST calls (do not remove!!!)
import roborest.sys_rest
import roborest.bubble_hub_rest
import roborest.game_rest

# do static files support
from fastapi.staticfiles import StaticFiles
roborest.app.mount("/", StaticFiles(directory=os.path.join(rootdir, "www")), name="www")

# start the webserver (note the logging configuration)
import uvicorn
uvicorn.run(roborest.app, host=args.host, port=args.port, log_config=args.logconf)
